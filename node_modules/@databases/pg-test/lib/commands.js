"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.help = exports.stop = exports.run = exports.start = void 0;
const ms = require("ms");
const parameter_reducers_1 = require("parameter-reducers");
const ta = require("type-assertions");
const pg_config_1 = require("@databases/pg-config");
const _1 = require(".");
const modern_spawn_1 = require("modern-spawn");
const seconds = (keys, name) => {
    return parameter_reducers_1.param.parsedString(keys, name, (str, key) => {
        if (/^\d+$/.test(str)) {
            return { valid: true, value: parseInt(str, 10) };
        }
        try {
            const value = ms(str);
            if (value !== undefined) {
                return { valid: true, value: Math.round(value / 1000) };
            }
        }
        catch (ex) {
            // return default error message
        }
        return {
            valid: false,
            reason: `Expected ${key} to be a valid number of seconds`,
        };
    });
};
const params = (0, parameter_reducers_1.startChain)()
    .addParam(parameter_reducers_1.param.flag(['-d', '--debug'], 'debug'))
    .addParam(parameter_reducers_1.param.string(['--image'], 'image'))
    .addParam(parameter_reducers_1.param.string(['--containerName'], 'containerName'))
    .addParam(parameter_reducers_1.param.integer(['-p', '--externalPort'], 'externalPort'))
    .addParam(seconds(['--connectTimeout'], 'connectTimeoutSeconds'))
    .addParam(parameter_reducers_1.param.flag(['-r', '--refresh'], 'refreshImage'))
    .addParam(parameter_reducers_1.param.string(['--user'], 'pgUser'))
    .addParam(parameter_reducers_1.param.string(['--db'], 'pgDb'));
async function runMigrationsAndAddToEnv(databaseURL, debug) {
    const config = (0, pg_config_1.getPgConfigSync)();
    const DEFAULT_ENV_VAR = process.env.MYSQL_TEST_ENV_VAR ||
        config.connectionStringEnvironmentVariable;
    process.env[DEFAULT_ENV_VAR] = databaseURL;
    const migrationsScript = process.env.MYSQL_TEST_MIGRATIONS_SCRIPT
        ? process.env.MYSQL_TEST_MIGRATIONS_SCRIPT.split(' ')
        : config.test.migrationsScript;
    if (migrationsScript) {
        console.warn('Running pg migrations');
        if (typeof migrationsScript === 'string') {
            await (0, modern_spawn_1.execBuffered)(migrationsScript, {
                debug: debug || config.test.debug || false,
            }).getResult();
        }
        else {
            await (0, modern_spawn_1.spawnBuffered)(migrationsScript[0], migrationsScript.slice(1), {
                debug: debug || config.test.debug || false,
            }).getResult();
        }
    }
}
async function start(args) {
    const parseResult = (0, parameter_reducers_1.parse)(params, args);
    if (!parseResult.valid) {
        console.error(parseResult.reason);
        return 1;
    }
    if (parseResult.rest.length) {
        console.error(`Unexpected option ${parseResult.rest[0]}`);
        return 1;
    }
    ta.assert();
    const { databaseURL } = await (0, _1.default)({
        ...parseResult.parsed,
        detached: true,
    });
    await runMigrationsAndAddToEnv(databaseURL, parseResult.parsed.debug);
    console.info(databaseURL);
    return 0;
}
exports.start = start;
async function run(args) {
    var _a;
    const parseResult = (0, parameter_reducers_1.parse)(params, args);
    if (!parseResult.valid) {
        console.error(parseResult.reason);
        return 1;
    }
    const rest = parseResult.rest[0] === '--' ? parseResult.rest.slice(1) : parseResult.rest;
    if (!rest.length) {
        console.error(`You must specify a command to run`);
        return 1;
    }
    const { databaseURL, kill } = await (0, _1.default)({
        ...parseResult.parsed,
        detached: true,
    });
    await runMigrationsAndAddToEnv(databaseURL, parseResult.parsed.debug);
    const result = await (0, modern_spawn_1.spawnBuffered)(parseResult.rest[0], parseResult.rest.slice(1), {
        debug: true,
    });
    await kill();
    return (_a = result.status) !== null && _a !== void 0 ? _a : 0;
}
exports.run = run;
const stopParams = (0, parameter_reducers_1.startChain)()
    .addParam(parameter_reducers_1.param.flag(['-d', '--debug'], 'debug'))
    .addParam(parameter_reducers_1.param.string(['--containerName'], 'containerName'));
async function stop(args) {
    const parseResult = (0, parameter_reducers_1.parse)(stopParams, args);
    if (!parseResult.valid) {
        console.error(parseResult.reason);
        return 1;
    }
    if (parseResult.rest.length) {
        console.error(`Unexpected option ${parseResult.rest[0]}`);
        return 1;
    }
    ta.assert();
    await (0, _1.killDatabase)({
        ...parseResult.parsed,
        detached: true,
    });
    return 0;
}
exports.stop = stop;
// prettier-ignore
function help(command) {
    switch (command) {
        case 'start':
            console.info(`usage: pg-test start [-h] ...`);
            console.info(``);
            console.info(`Start temporary databases for running tests, using docker`);
            console.info(``);
            console.info(`Optional arguments:`);
            console.info(`  -d, --debug                  Print all the output of child commands.`);
            console.info(`  --image            <string>  Override the Postgres docker image.`);
            console.info(`  --containerName    <string>  Specify a custom name for the container.`);
            console.info(`  -p, --externalPort <integer> Specify the port to run on.`);
            console.info(`  --connectTimeout   <seconds> How long should we allow for the container`);
            console.info(`                               to start. You can specify a raw number in`);
            console.info(`                               seconds, or a time string like "1 minute"`);
            console.info(`  -r, --refresh                Update the cached docker conatiner`);
            console.info(`  --user              <string> The Postgres user`);
            console.info(`  --db                <string> The Postgres database`);
            console.info(`  -h, --help                   Show this help message and exit.`);
            break;
        case 'run':
            console.info(`usage: pg-test run <options> your-command`);
            console.info(``);
            console.info(`Run your command with a MySQL database that is disposed of when your command exits`);
            console.info(``);
            console.info(`Optional arguments:`);
            console.info(`  -d, --debug                  Print all the output of child commands.`);
            console.info(`  --image            <string>  Override the Postgres docker image.`);
            console.info(`  --containerName    <string>  Specify a custom name for the container.`);
            console.info(`  -p, --externalPort <integer> Specify the port to run on.`);
            console.info(`  --connectTimeout   <seconds> How long should we allow for the container`);
            console.info(`                               to start. You can specify a raw number in`);
            console.info(`                               seconds, or a time string like "1 minute"`);
            console.info(`  -r, --refresh                Update the cached docker conatiner`);
            console.info(`  --user              <string> The Postgres user`);
            console.info(`  --db                <string> The Postgres database`);
            console.info(`  -h, --help                   Show this help message and exit.`);
            break;
        case 'stop':
            console.info(`usage: pg-test stop [-h] ...`);
            console.info(``);
            console.info(`Stop temporary databases created via pg-test start`);
            console.info(``);
            console.info(`Optional arguments:`);
            console.info(`  -d, --debug                  Print all the output of child commands.`);
            console.info(`  --containerName    <string>  Specify a custom name for the container.`);
            break;
        default:
            console.info(`usage: pg-test <command> [-h] ...`);
            console.info(``);
            console.info(`Start temporary databases for running tests using docker`);
            console.info(``);
            console.info(`Commands`);
            console.info(`  start    Starts a Postgres database`);
            console.info(`  run      Run a command with a Postgres database that is disposed of at the end`);
            console.info(`  stop     Stops a Postgres database`);
            console.info(`  help     Print documentation for commands`);
            console.info(``);
            console.info(`Optional arguments:`);
            console.info(`  -h, --help     Show this help message and exit.`);
            console.info(``);
            console.info(`For detailed help about a specific command, use: pg-test help <command>`);
            break;
    }
}
exports.help = help;
//# sourceMappingURL=commands.js.map