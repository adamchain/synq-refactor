import Ajv = require('ajv');
import PgConfig from './PgConfig';
export declare const ajv: Ajv.Ajv;
export { PgConfig };
export declare const PgConfigSchema: {
    $schema: string;
    defaultProperties: never[];
    definitions: {
        TestConfig: {
            defaultProperties: never[];
            properties: {
                connectTimeoutSeconds: {
                    default: number;
                    description: string;
                    minimum: number;
                    type: string;
                };
                containerName: {
                    default: string;
                    description: string;
                    type: string;
                };
                debug: {
                    default: boolean;
                    description: string;
                    type: string;
                };
                image: {
                    default: string;
                    description: string;
                    type: string;
                };
                migrationsScript: {
                    anyOf: ({
                        items: {
                            type: string;
                        };
                        type: string;
                    } | {
                        type: string;
                        items?: undefined;
                    })[];
                    description: string;
                };
                pgDb: {
                    default: string;
                    description: string;
                    type: string;
                };
                pgUser: {
                    default: string;
                    description: string;
                    type: string;
                };
                port: {
                    description: string;
                    maximum: number;
                    minimum: number;
                    type: string;
                };
            };
            required: string[];
            type: string;
        };
        TypesConfig: {
            defaultProperties: never[];
            properties: {
                columnTypeOverrides: {
                    additionalProperties: {
                        type: string;
                    };
                    default: {};
                    defaultProperties: never[];
                    description: string;
                    type: string;
                };
                directory: {
                    default: string;
                    description: string;
                    type: string;
                };
                domainFileName: {
                    default: string;
                    description: string;
                    type: string;
                };
                domainTypeMode: {
                    default: string;
                    description: string;
                    enum: string[];
                    type: string;
                };
                domainTypeName: {
                    default: string;
                    description: string;
                    type: string;
                };
                enumFileName: {
                    default: string;
                    description: string;
                    type: string;
                };
                enumTypeMode: {
                    default: string;
                    description: string;
                    enum: string[];
                    type: string;
                };
                enumTypeName: {
                    default: string;
                    description: string;
                    type: string;
                };
                primaryKeyFileName: {
                    default: string;
                    description: string;
                    type: string;
                };
                primaryKeyTypeMode: {
                    default: string;
                    description: string;
                    enum: string[];
                    type: string;
                };
                primaryKeyTypeName: {
                    default: string;
                    description: string;
                    type: string;
                };
                schemaFileName: {
                    default: string;
                    description: string;
                    type: string;
                };
                schemaTypeName: {
                    default: string;
                    description: string;
                    type: string;
                };
                serializeValueFileName: {
                    default: string;
                    description: string;
                    type: string;
                };
                serializeValueTypeName: {
                    default: string;
                    description: string;
                    type: string;
                };
                tableFileName: {
                    default: string;
                    description: string;
                    type: string;
                };
                tableInsertParametersFileName: {
                    default: string;
                    description: string;
                    type: string;
                };
                tableInsertParametersTypeName: {
                    default: string;
                    description: string;
                    type: string;
                };
                tableTypeName: {
                    default: string;
                    description: string;
                    type: string;
                };
                typeOverrides: {
                    additionalProperties: {
                        type: string;
                    };
                    default: {};
                    defaultProperties: never[];
                    description: string;
                    type: string;
                };
            };
            required: string[];
            type: string;
        };
    };
    properties: {
        connectionStringEnvironmentVariable: {
            default: string;
            description: string;
            type: string;
        };
        migrationsDirectory: {
            description: string;
            type: string;
        };
        test: {
            $ref: string;
            default: {};
            description: string;
        };
        types: {
            $ref: string;
            default: {};
            description: string;
        };
    };
    required: string[];
    type: string;
};
export declare type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>;
export default function validate(value: unknown): PgConfig;
