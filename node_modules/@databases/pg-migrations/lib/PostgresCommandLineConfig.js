"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const pg_1 = require("@databases/pg");

const pg_config_1 = require("@databases/pg-config");

const isInteractive = require("is-interactive");

const interrogator = require("interrogator");

const chalk = require("chalk");

const migrations_base_1 = require("@databases/migrations-base");

const PostgresDatabaseEngine_1 = require("./PostgresDatabaseEngine");

const assertIsDirectory_1 = require("./assertIsDirectory");

const {
  connectionStringEnvironmentVariable,
  migrationsDirectory
} = pg_config_1.getPgConfigSync();
const PostgresCommandLineConfig = {
  cliName: 'pg-migrations',
  parameterDocumentation: [{
    short: '-c',
    long: '--database',
    description: `A connection string for the database you want to connect to (can also be supplied as the environment variable ${connectionStringEnvironmentVariable}).`
  }, {
    short: '-D',
    long: '--directory',
    description: 'The directory containing migrations (can also be supplied via the "migrationsDirectory" config option).'
  }, {
    long: '--version-table',
    description: 'A table to store the version of @databases used. Defaults to "atdatabases_migrations_version".'
  }, {
    long: '--migrations-table',
    description: 'A table to store the applied migrations. Defaults to "atdatabases_migrations_applied".'
  }],
  parameterParser: migrations_base_1.parameters.startChain().addParam(migrations_base_1.parameters.param.string(['-c', '--database'], 'database')).addParam(migrations_base_1.parameters.param.string(['-D', '--directory'], 'directory')).addParam(migrations_base_1.parameters.param.string(['--version-table'], 'versionTableName')).addParam(migrations_base_1.parameters.param.string(['--migrations-table'], 'appliedMigrationsTableName')),
  getEngine: async ({
    database = process.env[connectionStringEnvironmentVariable],
    versionTableName = 'atdatabases_migrations_version',
    appliedMigrationsTableName = 'atdatabases_migrations_applied',
    directory = migrationsDirectory
  }) => {
    let migrationsDirectory = directory;

    if (!migrationsDirectory) {
      console.error('You must supply a directory path for your migrations. You can supply it as either:');
      console.error('');
      console.error(` - The ${chalk.cyan('migrationsDirectory')} config value using @databases/pg-config`);
      console.error(` - The ${chalk.cyan('--directory')} paramter when calling @databases/pg-migrations`);
      console.error('');

      if (isInteractive()) {
        migrationsDirectory = await interrogator.input('Please enter a directory:');
      }
    }

    if (!migrationsDirectory) {
      process.exit(1);
    }

    migrationsDirectory = assertIsDirectory_1.default(migrationsDirectory, 'exit');
    let connection = database && pg_1.default({
      connectionString: database,
      poolSize: 1,
      bigIntMode: 'bigint'
    });

    if (!connection) {
      console.error('You must supply a connection string for the database. You can supply it as either:');
      console.error('');
      console.error(` - The environment variable ${chalk.cyan(connectionStringEnvironmentVariable)}`);
      console.error(` - The ${chalk.cyan('--database')} paramter when calling pg-migrations`);
      console.error('');

      if (isInteractive()) {
        const connectionString = await interrogator.input('Please enter a connection string:');
        connection = connectionString && pg_1.default({
          connectionString,
          poolSize: 1,
          bigIntMode: 'bigint'
        });
      }
    }

    if (!connection) {
      process.exit(1);
    }

    return new PostgresDatabaseEngine_1.default(connection, {
      versionTableName,
      appliedMigrationsTableName,
      migrationsDirectory
    });
  }
};
exports.default = PostgresCommandLineConfig;