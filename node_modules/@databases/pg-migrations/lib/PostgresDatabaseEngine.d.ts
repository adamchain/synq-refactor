import { DatabaseEngine, DatabaseEngineTransaction, Result, DatabaseVersionError, MigrationWithNoValidExport, IDirectoryContext } from '@databases/migrations-base';
import { ConnectionPool, Transaction } from '@databases/pg';
export interface MigrationsConfig {
    migrationsDirectory: string;
    /**
     * @default "atdatabases_migrations_version"
     */
    versionTableName: string;
    /**
     * @default "atdatabases_migrations_applied"
     */
    appliedMigrationsTableName: string;
}
export declare type Migration = (tx: Transaction) => Promise<void>;
export default class PostgresDatabaseEngine implements DatabaseEngine<Migration> {
    private readonly _connection;
    private readonly _config;
    readonly directory: IDirectoryContext<Migration>;
    constructor(connection: ConnectionPool, config: MigrationsConfig);
    readonly databaseName = "Postgres";
    readonly packageName = "@databases/pg-migrations";
    readonly cliName = "pg-migrations";
    readonly packageVersion: any;
    checkDatabaseVersion(): Promise<Result<void, DatabaseVersionError>>;
    tx<TResult>(fn: (tx: DatabaseEngineTransaction<Migration>) => Promise<TResult>): Promise<TResult>;
    loadMigration(migrationFileName: string): Result<Migration, MigrationWithNoValidExport>;
    dispose(): Promise<void>;
}
