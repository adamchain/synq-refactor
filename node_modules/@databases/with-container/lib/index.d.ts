/// <reference types="node" />
export declare const detectPort: (defaultPort: number) => Promise<number>;
export interface Options {
    debug: boolean;
    image: string;
    containerName: string;
    defaultExternalPort: number;
    externalPort?: number;
    internalPort: number;
    connectTimeoutSeconds: number;
    environment?: {
        [key: string]: string;
    };
    /**
     * By default, we check if the image already exists
     * before pulling it. We only pull if there is no
     * existing image. This is faster, but means we don't
     * get updates to the image.
     */
    refreshImage?: boolean;
    detached?: boolean;
    enableDebugInstructions?: string;
    testConnection?: (opts: NormalizedOptions & {
        testPortConnection: () => Promise<boolean>;
    }) => Promise<boolean>;
}
export interface NormalizedOptions extends Pick<Options, Exclude<keyof Options, 'defaultExternalPort'>> {
    detached: boolean;
    externalPort: number;
}
export declare function imageExists(options: NormalizedOptions | Options): Promise<boolean>;
export declare function pullDockerImage(options: NormalizedOptions | Options): Promise<void>;
export declare function startDockerContainer(options: NormalizedOptions): import("child_process").ChildProcess;
export declare function waitForDatabaseToStart(options: NormalizedOptions): Promise<void>;
export declare function killOldContainers(options: Pick<NormalizedOptions, 'debug' | 'containerName'>): Promise<void>;
export default function startContainer(options: Options): Promise<{
    proc: import("child_process").ChildProcess;
    externalPort: number;
    kill(): Promise<void>;
}>;
