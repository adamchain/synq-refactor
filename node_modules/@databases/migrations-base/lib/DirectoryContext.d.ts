import Result from './types/Result';
import { MigrationWithNoValidExport } from './types/MigrationError';
export interface IDirectoryContext<TMigration = unknown> {
    listFiles(): Promise<string[]>;
    read(filename: string): Promise<string>;
    write(filename: string, content: string): Promise<void>;
    rename(fromFilename: string, toFilename: string): Promise<void>;
    delete(filename: string): Promise<void>;
    loadMigration(filename: string): Result<TMigration, MigrationWithNoValidExport>;
}
export default class DirectoryContext<TMigration> implements IDirectoryContext<TMigration> {
    private readonly _directory;
    private readonly _loadMigration;
    constructor(directory: string, loadMigration: (filename: string) => Result<TMigration, MigrationWithNoValidExport>);
    private _resolve;
    listFiles(): Promise<string[]>;
    read(filename: string): Promise<string>;
    write(filename: string, content: string): Promise<void>;
    rename(fromFilename: string, toFilename: string): Promise<void>;
    delete(filename: string): Promise<void>;
    loadMigration(filename: string): Result<TMigration, MigrationWithNoValidExport>;
}
