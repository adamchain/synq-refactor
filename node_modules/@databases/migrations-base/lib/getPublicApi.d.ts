import DatabaseEngine from './types/DatabaseEngine';
import MigrationError from './types/MigrationError';
import { RunCommandOptions } from './runCommand';
import { SequenceErrorIgnoreCode } from './methods/validateMigrationsSequence';
export interface PublicAPI<TParameters> {
    readonly applyMigrations: (parameters: TParameters & RunCommandOptions<MigrationError> & {
        ignoredErrors?: SequenceErrorIgnoreCode[];
    }) => Promise<void>;
    readonly ignoreError: (parameters: TParameters & RunCommandOptions<MigrationError> & {
        migrationIndex: number;
        errorType: SequenceErrorIgnoreCode;
    }) => Promise<void>;
    readonly markMigrationAsApplied: (parameters: TParameters & RunCommandOptions<MigrationError> & {
        migrationIndex: number;
    }) => Promise<void>;
    readonly markMigrationAsUnapplied: (parameters: TParameters & RunCommandOptions<MigrationError> & {
        migrationIndex: number;
    }) => Promise<void>;
    readonly restoreMigrationFromDatabase: (parameters: TParameters & RunCommandOptions<MigrationError> & {
        migrationIndex: number;
    }) => Promise<void>;
}
export default function getPublicApi<TMigration, TParameters>(getEngine: (parameters: TParameters) => DatabaseEngine<TMigration>): PublicAPI<TParameters>;
