import AppliedMigration from './AppliedMigration';
import Result from './Result';
import { DatabaseVersionError, MigrationWithNoValidExport } from './MigrationError';
import { IDirectoryContext } from '../DirectoryContext';
export interface DatabaseEngineTransaction<TMigration> {
    getVersion(): Promise<string>;
    updateVersion(oldVersion: string, newVersion: string, oldVersionIsLessThan: (newVersion: string) => boolean): Promise<void>;
    getMigrations(): Promise<AppliedMigration[]>;
    markAsApplied(migration: AppliedMigration): Promise<void>;
    ignoreError(migration: AppliedMigration): Promise<void>;
    markAsObsolete(migration: AppliedMigration): Promise<void>;
    applyMigration(migration: TMigration): Promise<void>;
}
export interface DatabaseEngineBase {
    readonly databaseName: string;
    readonly packageName: string;
    readonly cliName: string;
    readonly packageVersion: string;
}
export default interface DatabaseEngine<TMigration> extends DatabaseEngineBase {
    checkDatabaseVersion(): Promise<Result<void, DatabaseVersionError>>;
    tx<TResult>(fn: (tx: DatabaseEngineTransaction<TMigration>) => Promise<TResult>): Promise<TResult>;
    loadMigration(migrationFileName: string): Result<TMigration, MigrationWithNoValidExport>;
    directory: IDirectoryContext<TMigration>;
    dispose(): Promise<void>;
}
