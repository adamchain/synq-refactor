import DatabaseEngine from './types/DatabaseEngine';
import { DatabaseVersionError, DatabaseUsesNewerVersionError, DatabaseUsesOlderVersionError, MigrationFilenamesError } from './types/MigrationError';
import Result from './types/Result';
import MigrationsContext, { MigrationCommandParameters } from './MigrationContext';
import Operation from './types/Operation';
export declare type Command<TResult, TError> = (ctx: MigrationsContext) => Result<TResult, TError>;
export interface RunCommandOptions<TError> {
    dryRun?: boolean;
    handleError?: (error: TError, ctx: MigrationsContext) => Promise<Result<void, TError>>;
    beforeOperation?: (operation: Operation) => Promise<void | 'stop' | 'rollback'>;
    afterOperation?: (operation: Operation) => Promise<void>;
}
export default function runCommand<TMigration, TResult, TError>(engine: DatabaseEngine<TMigration>, command: (ctx: MigrationsContext) => Result<TResult, TError>, parameters: MigrationCommandParameters, { dryRun, handleError, beforeOperation, afterOperation, }?: {
    dryRun?: boolean;
    handleError?: (error: TError, ctx: MigrationsContext) => Promise<Result<void, TError>>;
    beforeOperation?: (operation: Operation) => Promise<void | 'stop' | 'rollback'>;
    afterOperation?: (operation: Operation) => Promise<void>;
}): Promise<Result<void, TError | DatabaseVersionError | DatabaseUsesNewerVersionError | DatabaseUsesOlderVersionError | MigrationFilenamesError>>;
