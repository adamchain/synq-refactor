/// <reference types="node" />
import { SpawnOptionsWithoutStdio, ExecOptions, ExecSyncOptions } from 'child_process';
export declare function formatCommand(command: string, args?: readonly string[]): string;
declare class ResultClass {
    readonly command: string;
    readonly args: readonly string[] | undefined;
    readonly stdout: Buffer;
    readonly stderr: Buffer;
    readonly status: number | null;
    constructor(command: string, args: readonly string[] | undefined, stdout: Buffer, stderr: Buffer, status: number | null);
    getResult(): Buffer;
    getResult(encoding: string): string;
    getResult(encoding?: string): Buffer | string;
}
export interface Result extends ResultClass {
}
export interface ResultPromise extends Promise<Result> {
    getResult(): Promise<Buffer>;
    getResult(encoding: string): Promise<string>;
    getResult(encoding?: string): Promise<Buffer | string>;
}
export interface SpawnBufferedOptions extends SpawnOptionsWithoutStdio {
    debug?: boolean | {
        stdout?: boolean;
        stderr?: boolean;
    };
}
export declare function spawnBuffered(command: string, args: string[], { debug, ...options }?: SpawnBufferedOptions): ResultPromise;
export declare function spawnBufferedSync(command: string, args: string[], { debug, ...options }?: SpawnBufferedOptions): Result;
export interface ExecBufferedOptions extends ExecOptions {
    debug?: boolean | {
        stdout?: boolean;
        stderr?: boolean;
    };
}
export declare function execBuffered(command: string, { debug, windowsHide, ...options }?: ExecBufferedOptions): ResultPromise;
export interface ExecSyncBufferedOptions extends ExecSyncOptions {
    debug?: boolean | {
        stdout?: boolean;
        stderr?: boolean;
    };
}
export declare function execBufferedSync(command: string, { debug, windowsHide, ...options }?: ExecSyncBufferedOptions): Result;
export {};
